# Factorio Idle 项目 BrowserTools 使用指南

## 🎯 项目特定调试场景

### 生产模块UI检查
- **顶部标签栏**：检查分类标签的布局和选中状态
- **左侧物品列表**：验证物品分类和选择功能
- **右侧物品详情**：检查详情面板的布局和内容显示
- **底部制作队列**：验证队列显示和交互功能

### 初始化问题排查
- **双重初始化检测**：检查"App initialized"是否执行两次
- **数据加载状态**：验证游戏数据和i18n数据加载
- **制作引擎启动**：确认CraftingEngine是否正确启动
- **服务初始化**：检查DataService、RecipeService等服务的初始化

### UI样式优化验证
- **背景层级简化**：验证是否减少了过度嵌套的Card组件
- **分割线优化**：检查是否使用border替代Divider组件
- **间距调整**：验证padding和margin的优化效果
- **图标尺寸**：确认FactorioIcon的尺寸标准化

## 🔍 详细检查项目

### 生产模块组件检查

#### 顶部标签 (CategoryTabs)
```typescript
// 检查标签布局和选中状态
takeScreenshot()
getConsoleErrors() // 检查是否有样式错误
```

#### 左侧物品列表 (ItemList)
```typescript
// 检查列表渲染和选择功能
getConsoleLogs() // 查看物品数据加载
getConsoleErrors() // 检查选择事件错误
```

#### 右侧物品详情 (ItemDetailPanel)
```typescript
// 检查详情面板布局
takeScreenshot()
runAccessibilityAudit() // 检查可访问性
```

#### 底部制作队列 (CraftingQueue)
```typescript
// 检查队列显示和交互
getConsoleLogs() // 查看队列状态
getConsoleErrors() // 检查制作逻辑错误
```

### 常见问题排查步骤

#### 数据加载问题
1. **检查控制台日志**
   ```typescript
   getConsoleLogs() // 查看数据加载日志
   ```

2. **检查网络请求**
   ```typescript
   getNetworkLogs() // 查看数据请求状态
   ```

3. **检查错误信息**
   ```typescript
   getConsoleErrors() // 查看加载错误
   ```

#### UI响应性问题
1. **性能审计**
   ```typescript
   runPerformanceAudit() // 检查渲染性能
   ```

2. **可访问性检查**
   ```typescript
   runAccessibilityAudit() // 检查无障碍支持
   ```

3. **最佳实践检查**
   ```typescript
   runBestPracticesAudit() // 检查代码质量
   ```

## 📋 项目特定检查清单

### 生产模块检查
- [ ] 顶部标签栏正常显示和切换
- [ ] 左侧物品列表正确分类和选择
- [ ] 右侧详情面板布局合理
- [ ] 底部制作队列功能正常
- [ ] 分割线和间距视觉效果良好

### 初始化检查
- [ ] 应用只初始化一次
- [ ] 游戏数据正确加载
- [ ] i18n数据正确加载
- [ ] 制作引擎正常启动
- [ ] 无控制台错误

### 样式优化检查
- [ ] 减少了背景层级嵌套
- [ ] 使用border替代Divider
- [ ] 图标尺寸标准化
- [ ] 间距使用统一规范
- [ ] 响应式设计正常

## 🎨 UI样式检查要点

### 布局检查
- **响应式设计**：在不同屏幕尺寸下的表现
- **元素对齐**：确保组件对齐和间距一致
- **滚动行为**：检查长列表的滚动性能
- **移动端适配**：验证触摸交互和布局

### 视觉检查
- **颜色一致性**：确保使用统一的主题色彩
- **字体可读性**：检查文本大小和对比度
- **图标显示**：验证FactorioIcon的正确显示
- **动画效果**：检查过渡动画的流畅性

### 交互检查
- **按钮可点击性**：确保所有按钮都能正常点击
- **选择状态**：验证选中状态的视觉反馈
- **键盘导航**：检查键盘操作的可用性
- **触摸支持**：验证移动端的触摸交互

## 🔧 性能监控

### 渲染性能
```typescript
// 检查组件渲染性能
runPerformanceAudit()
```

### 内存使用
```typescript
// 检查内存泄漏
getConsoleLogs() // 查看内存相关日志
```

### 网络性能
```typescript
// 检查数据加载性能
getNetworkLogs()
```

## 📊 工具组合使用示例

### 完整的UI检查流程
```typescript
// 1. 基础检查
takeScreenshot()
getConsoleErrors()
getConsoleLogs()

// 2. 性能检查
runPerformanceAudit()
runAccessibilityAudit()

// 3. 网络检查
getNetworkLogs()

// 4. 最佳实践检查
runBestPracticesAudit()
```

### 初始化问题排查流程
```typescript
// 1. 检查控制台日志
getConsoleLogs()

// 2. 检查错误信息
getConsoleErrors()

// 3. 检查网络请求
getNetworkLogs()

// 4. 截图记录状态
takeScreenshot()
```

## 🎯 项目特定最佳实践

### 调试策略
1. **问题重现**：确保能够稳定重现问题
2. **状态记录**：使用截图和日志记录问题状态
3. **逐步排查**：从基础检查到深度分析
4. **修复验证**：确保修复后问题不再出现

### 性能优化
1. **定期监控**：定期运行性能审计
2. **组件优化**：使用React.memo和useMemo
3. **虚拟化**：对长列表使用虚拟化
4. **懒加载**：对大型组件使用懒加载

### 质量保证
1. **可访问性**：确保UI符合无障碍标准
2. **响应式**：适配不同设备和屏幕尺寸
3. **一致性**：保持UI风格的一致性
4. **用户体验**：优化交互和视觉反馈

## 📚 相关资源

### 核心组件
- [ProductionModule.tsx](mdc:src/components/production/ProductionModule.tsx) - 生产模块主组件
- [ItemDetailPanel.tsx](mdc:src/components/detail/ItemDetailPanel.tsx) - 物品详情面板
- [UnifiedRecipeCard.tsx](mdc:src/components/detail/UnifiedRecipeCard.tsx) - 统一配方卡片
- [App.tsx](mdc:src/App.tsx) - 应用主入口

### 服务组件
- [DataService.ts](mdc:src/services/DataService.ts) - 数据服务
- [CraftingEngine.ts](mdc:src/utils/craftingEngine.ts) - 制作引擎

### 相关规则
- [browser-tools-debugging.mdc](mdc:.cursor/rules/browser-tools-debugging.mdc) - 通用BrowserTools指南
- [ui-design-system.mdc](mdc:.cursor/rules/ui-design-system.mdc) - UI设计系统规范

### 常见问题解决方案
- React.StrictMode双重初始化问题
- UI样式不一致和背景层级问题
- 性能优化和响应式设计
- 组件渲染和状态管理优化
5. **监控性能指标** - 定期运行性能审计

这个规则专门针对Factorio Idle项目，帮助您更有效地使用BrowserTools进行调试和UI检查。