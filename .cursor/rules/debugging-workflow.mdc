# 调试工作流程规则

## 🔍 调试前准备

### 检查现有服务状态
```bash
# 检查5173端口服务
lsof -i :5173
# 检查Vite进程
ps aux | grep vite | grep -v grep
```

### 优先使用现有服务
- ✅ **首选**: 使用已运行的 `http://localhost:5173`
- ⚠️ **避免**: 重复启动新的开发服务器
- 🚫 **禁止**: 同时运行多个相同项目实例

## 🛠️ 调试操作流程

### 1. 代码修改调试
- 直接编辑源代码文件
- 利用Vite的HMR（热模块替换）自动刷新
- 观察浏览器控制台的实时反馈

### 2. 浏览器工具使用
```javascript
// 使用现有浏览器标签页
// 开发者工具 → Console → 查看调试信息
// Network → 监控API请求
// Sources → 设置断点调试
```

### 3. 终端命令优先级
```bash
# 1. 优先检查现有服务
lsof -i :5173

# 2. 如果服务正常运行，直接访问
open http://localhost:5173

# 3. 只有在必要时才启动新服务
npm run dev  # 仅当无服务运行时
```

## 📊 性能优化建议

### 资源管理
- 保持单一开发服务器实例
- 避免重复的构建过程
- 利用现有的编译缓存

### 内存使用
- 关闭不必要的开发工具
- 定期清理无用的浏览器标签
- 监控Node.js进程内存使用

## 🚨 常见问题处理

### 端口冲突
```bash
# 查找占用端口的进程
lsof -ti:5173
# 如果是同项目的服务，直接使用
# 如果是其他进程，考虑终止: kill -9 <PID>
```

### 服务异常
- 检查终端错误日志
- 重启浏览器标签页而非整个服务
- 必要时重启开发服务器

### 调试技巧
- 使用浏览器开发者工具的Preserve log
- 利用React DevTools扩展
- 使用console.log进行快速调试
- 设置条件断点进行精确调试
