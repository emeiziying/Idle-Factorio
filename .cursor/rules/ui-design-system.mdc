# UI设计系统规范

## 🎨 设计原则

### 核心原则
- **简洁高效**：减少不必要的视觉元素，专注于功能
- **统一风格**：保持整个应用的一致性
- **层次清晰**：通过视觉层次引导用户注意力
- **响应式设计**：适配不同屏幕尺寸

### 设计理念
- **扁平化设计**：减少背景层级，避免过度嵌套
- **信息密度适中**：平衡信息展示和视觉舒适度
- **交互反馈明确**：用户操作有清晰的视觉反馈

## 🎯 主题系统

### 颜色规范
```typescript
// 主色调
primary: {
  main: '#ff6b35', // 橙色 - 主要操作和选中状态
  light: '#ff8a65',
  dark: '#e64a19'
}

// 辅助色
secondary: {
  main: '#2196f3', // 蓝色 - 次要操作
  light: '#64b5f6',
  dark: '#1976d2'
}

// 背景色系
background: {
  default: '#121212', // 深色背景
  paper: '#1e1e1e',  // 卡片背景
  elevated: '#2d2d2d' // 悬浮背景
}

// 文本色系
text: {
  primary: '#ffffff',   // 主要文本
  secondary: '#b0b0b0', // 次要文本
  disabled: '#666666'   // 禁用文本
}

// 分割线
divider: '#333333' // 统一的分割线颜色
```

### 间距系统
```typescript
// 基础间距单位
spacing: {
  0.25: '2px',   // 最小间距
  0.5: '4px',    // 小间距
  1: '8px',      // 基础间距
  1.5: '12px',   // 中等间距
  2: '16px',     // 大间距
  3: '24px',     // 超大间距
}
```

## 📱 组件设计规范

### 卡片组件 (Card/Box)
```typescript
// 标准卡片样式
sx={{
  p: 1.5,                    // 内边距
  borderRadius: 1,            // 圆角
  border: '1px solid',       // 边框
  borderColor: 'divider',     // 边框颜色
  bgcolor: 'background.paper' // 背景色
}}

// 避免过度嵌套
// ❌ 错误：多层Card嵌套
<Card>
  <CardContent>
    <Card>
      <CardContent>内容</CardContent>
    </Card>
  </CardContent>
</Card>

// ✅ 正确：使用Box替代
<Box sx={{ p: 1.5, borderRadius: 1, border: '1px solid', borderColor: 'divider' }}>
  内容
</Box>
```

### 分割线规范
```typescript
// 使用边框替代Divider组件
// ❌ 避免使用
<Divider sx={{ mx: 0.5 }} />

// ✅ 推荐使用
<Box sx={{ borderRight: 1, borderColor: 'divider' }} />
<Box sx={{ borderTop: 1, borderColor: 'divider' }} />
```

### 图标尺寸规范
```typescript
// 图标尺寸标准
const iconSizes = {
  tiny: 16,    // 极小图标
  small: 24,   // 小图标
  medium: 32,  // 中等图标
  large: 48,   // 大图标
  xlarge: 64   // 超大图标
}

// 在FactorioIcon中使用
<FactorioIcon size={24} /> // 推荐使用24px作为标准尺寸
```

## 🏗️ 布局规范

### 响应式布局
```typescript
// 移动端适配
const useIsMobile = () => {
  return useMediaQuery('(max-width:768px)');
};

// 布局容器
<Box sx={{ 
  width: '100%', 
  height: '100%', 
  display: 'flex', 
  flexDirection: 'column' 
}}>
```

### 面板布局
```typescript
// 标准面板结构
<Box sx={{ 
  flex: 1, 
  display: 'flex',
  overflow: 'hidden' 
}}>
  {/* 左侧面板 */}
  <Box sx={{ 
    width: '100px',
    borderRight: 1,
    borderColor: 'divider'
  }}>
  </Box>
  
  {/* 右侧面板 */}
  <Box sx={{ flex: 1 }}>
  </Box>
</Box>
```

## 🎯 交互设计

### 按钮设计
```typescript
// 主要按钮
<Button 
  variant="contained" 
  color="primary"
  size="small"
  sx={{ 
    borderRadius: 1,
    textTransform: 'none'
  }}
>

// 次要按钮
<Button 
  variant="outlined" 
  color="primary"
  size="small"
  sx={{ 
    borderRadius: 1,
    textTransform: 'none'
  }}
>
```

### 状态反馈
```typescript
// 加载状态
<CircularProgress size={20} color="primary" />

// 成功/错误消息
<Snackbar anchorOrigin={{ vertical: 'top', horizontal: 'center' }}>
  <Alert severity="success">操作成功</Alert>
</Snackbar>
```

## 📋 内容组织

### 信息层次
```typescript
// 标题层次
<Typography variant="h6" fontWeight="bold">主标题</Typography>
<Typography variant="subtitle1" fontWeight="600">副标题</Typography>
<Typography variant="body2">正文</Typography>
<Typography variant="caption">说明文字</Typography>

// 卡片标题
<Typography variant="subtitle2" sx={{ 
  fontSize: '0.8rem',
  fontWeight: 600,
  color: 'text.primary',
  mb: 1
}}>
  卡片标题
</Typography>
```

### 列表设计
```typescript
// 紧凑列表
<Box display="flex" flexDirection="column" gap={1}>
  {items.map(item => (
    <Box key={item.id} sx={{ p: 1, borderRadius: 1 }}>
      {item.content}
    </Box>
  ))}
</Box>

// 网格布局
<Box display="flex" flexWrap="wrap" gap={1}>
  {items.map(item => (
    <Chip key={item.id} label={item.name} size="small" />
  ))}
</Box>
```

## 🔧 性能优化

### 组件优化
```typescript
// 使用React.memo优化渲染
const OptimizedComponent = React.memo(({ data }) => {
  return <div>{data}</div>;
});

// 使用useMemo缓存计算结果
const memoizedValue = useMemo(() => {
  return expensiveCalculation(data);
}, [data]);
```

### 虚拟化列表
```typescript
// 长列表使用虚拟化
import { FixedSizeList as List } from 'react-window';

<List
  height={400}
  itemCount={1000}
  itemSize={35}
  width="100%"
>
  {({ index, style }) => (
    <div style={style}>
      Row {index}
    </div>
  )}
</List>
```

## 📱 移动端适配

### 触摸友好
```typescript
// 按钮最小触摸区域
<Button sx={{ minHeight: 44, minWidth: 44 }}>
  按钮
</Button>

// 列表项触摸区域
<Box sx={{ 
  p: 1.5, 
  minHeight: 48,
  cursor: 'pointer'
}}>
  列表项
</Box>
```

### 响应式断点
```typescript
// 断点定义
const breakpoints = {
  xs: 0,    // 手机
  sm: 600,  // 平板
  md: 900,  // 小桌面
  lg: 1200, // 大桌面
  xl: 1536  // 超大桌面
}
```

## 🎨 视觉一致性检查清单

### 设计检查
- [ ] 颜色使用是否符合主题规范
- [ ] 间距是否统一使用spacing系统
- [ ] 组件是否避免过度嵌套
- [ ] 分割线是否使用统一的border样式
- [ ] 图标尺寸是否标准化
- [ ] 文本层次是否清晰
- [ ] 交互反馈是否明确
- [ ] 移动端是否适配良好

### 代码检查
- [ ] 是否使用统一的sx样式
- [ ] 是否避免重复的样式定义
- [ ] 是否使用主题变量而非硬编码
- [ ] 组件是否遵循单一职责原则
- [ ] 是否进行了适当的性能优化

## 📚 参考文件

### 核心组件
- [ProductionModule.tsx](mdc:src/components/production/ProductionModule.tsx) - 生产模块主布局
- [ItemDetailPanel.tsx](mdc:src/components/detail/ItemDetailPanel.tsx) - 物品详情面板
- [UnifiedRecipeCard.tsx](mdc:src/components/detail/UnifiedRecipeCard.tsx) - 统一配方卡片
- [FactorioIcon.tsx](mdc:src/components/common/FactorioIcon.tsx) - 图标组件

### 主题配置
- [theme/index.ts](mdc:src/theme/index.ts) - 主题配置
- [App.tsx](mdc:src/App.tsx) - 应用主题提供者

### 样式优化历史
- 移除过度嵌套的Card组件
- 统一使用border替代Divider
- 优化图标尺寸和间距
- 简化背景层级结构

- 优化图标尺寸和间距
- 简化背景层级结构
