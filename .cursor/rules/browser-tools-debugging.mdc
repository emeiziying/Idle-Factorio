# BrowserTools 调试和UI检查指南

## 🔧 核心工具功能

### 截图和检查工具
- **takeScreenshot**: 获取当前页面截图，用于UI样式验证
- **getConsoleLogs**: 检查控制台日志，排查JavaScript错误
- **getConsoleErrors**: 检查控制台错误，识别异常问题
- **getNetworkLogs**: 检查网络请求日志，排查API问题

### 审计和分析工具
- **runPerformanceAudit**: 性能审计，检查页面加载和渲染性能
- **runAccessibilityAudit**: 可访问性审计，确保UI符合无障碍标准
- **runSEOAudit**: SEO审计，检查页面结构和元数据
- **runBestPracticesAudit**: 最佳实践审计，检查代码质量和标准

## 🎯 使用场景

### UI样式检查
- 验证组件布局和样式是否正确
- 检查响应式设计在不同屏幕尺寸下的表现
- 确认视觉层次和颜色搭配
- 验证动画和过渡效果

### Bug排查
- 检查JavaScript错误和异常
- 分析网络请求失败
- 排查性能问题和内存泄漏
- 验证数据加载和状态管理

### 性能检查
- 监控页面加载时间
- 检查资源优化情况
- 分析渲染性能
- 识别性能瓶颈

## 📋 调试检查清单

### 基础检查
- [ ] 页面是否正常加载
- [ ] 控制台是否有错误
- [ ] 网络请求是否成功
- [ ] UI组件是否正常渲染

### 样式检查
- [ ] 布局是否对齐
- [ ] 颜色是否一致
- [ ] 字体是否清晰
- [ ] 间距是否合理

### 性能检查
- [ ] 页面加载速度
- [ ] 组件渲染性能
- [ ] 内存使用情况
- [ ] 资源加载优化

## 🔍 工具调用示例

### UI样式验证
```typescript
// 获取页面截图
takeScreenshot()

// 检查控制台错误
getConsoleErrors()

// 运行性能审计
runPerformanceAudit()
```

### Bug排查
```typescript
// 检查控制台日志
getConsoleLogs()

// 检查网络请求
getNetworkLogs()

// 运行可访问性审计
runAccessibilityAudit()
```

## 🎨 最佳实践

### 调试流程
1. **问题识别**: 明确要解决的问题
2. **工具选择**: 选择合适的调试工具
3. **数据收集**: 获取相关日志和截图
4. **问题分析**: 分析收集到的信息
5. **解决方案**: 制定修复方案
6. **验证修复**: 确认问题已解决

### 工具使用原则
- **及时性**: 发现问题立即使用工具排查
- **全面性**: 结合多个工具进行综合分析
- **系统性**: 建立完整的调试流程
- **预防性**: 定期进行性能和质量检查

## 📚 相关资源

### 项目特定规则
- [factorio-idle-browser-tools.mdc](mdc:.cursor/rules/factorio-idle-browser-tools.mdc) - 项目特定的BrowserTools使用指南
- [ui-design-system.mdc](mdc:.cursor/rules/ui-design-system.mdc) - UI设计系统规范

### 核心组件
- [ProductionModule.tsx](mdc:src/components/production/ProductionModule.tsx) - 生产模块主组件
- [ItemDetailPanel.tsx](mdc:src/components/detail/ItemDetailPanel.tsx) - 物品详情面板
- [App.tsx](mdc:src/App.tsx) - 应用主入口

### 常见问题
- React.StrictMode导致的双重初始化
- UI样式不一致问题
- 性能优化和响应式设计
- 组件渲染和状态管理

description:
globs:
